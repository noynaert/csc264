GAS LISTING moreMoving.s 			page 1


   1              	/*
   2              	
   3              	This program illustates copying the Least Significant Bits between registers
   4              	
   5              	It will emphasize themovement of LSB to the R8-R15 registers
   6              	
   7              	file: moreMoving.s
   8              	
   9              	*/
  10              	
  11              	.globl _start
  12              	
  13              	.data
  14 0000 10325476 	  num1:       .quad   0xfedcba9876543210  # A big number filling the bits
  14      98BADCFE 
  15 0008 00000000 	  sixtyFour:  .quad   0
  15      00000000 
  16 0010 00000000 	  thiryTwo:   .long   0
  17 0014 0000     	  sixteen:    .word   0
  18 0016 00       	  eight:      .byte   0
  19              	
  20              	.text
  21              	_start:
  22              	
  23              	  # Move the 64-bit number into RAX, then move different groups of LSB to registers
  24 0000 488B0425 	  movq  num1, %rax   # move the value stored in num1 into the rax register
  24      00000000 
  25 0008 4989C4   	  movq  %rax, %r12   # move 64 LSB to the ebx
  26 000b 4189C5   	  movl  %eax, %r13d  # move 32 LSB
  27 000e 664189C6 	  mov   %ax,  %r14w  # move 16 LSB
  28 0012 4188C7   	  movb  %al,  %r15b  # move 8 LSB
  29              	
  30              	_toMemory:
  31              	  #dumpthe contents of r12 through r15 to memory.
  32 0015 4C892425 	  movq  %r12,sixtyFour
  32      00000000 
  33 001d 44892C25 	  movl  %r13d,thiryTwo
  33      00000000 
  34 0025 66448934 	  mov   %r14w,sixteen
  34      25000000 
  34      00
  35 002e 44883C25 	  movb  %r15b,eight
  35      00000000 
  36              	
  37              	_exit:
  38              	  # use syscall to exit and return sum as an exit code.  System.exit(sum)  sys.exit(sum)
  39 0036 48C7C03C 	  movq $60, %rax
  39      000000
  40 003d 48C7C700 	  mov  $0, %rdi
  40      000000
  41 0044 0F05     	  syscall
